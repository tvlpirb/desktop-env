(include "./variables.yuck")

(defwidget tray []
  (box
    :class "tray"
    :halign "end"
    :vexpand true
    :space-evenly false
    (box
      :class "tray-item"
      :spacing 0
      :space-evenly false
      :vexpand true
      (image :class "icon wifi-icon" :path wifi-icon :image-width "20" :image-height "20")
      (label :class "text wifi-text" :text wifi-essid))
    (box
      :class "tray-item"
      :spacing 0
      :space-evenly false
      :vexpand true
      (image :class "icon vol-icon" :path vol-icon :image-width "20" :image-height "20")
      (label :class "text vol-text" :text "${vol-num}%"))
    (box
      :class "tray-item"
      :spacing 0
      :space-evenly false
      :vexpand true
      (image :class "icon bat-icon" :path bat-icon :image-width "22" :image-height "22")
      (label :class "text vol-text" :text "${bat-num}%"))
    (box
      :class "tray-item"
      :class "tray-item"
      :spacing 0
      :space-evenly false
      :vexpand true
      (image :class "icon br-icon" :path "../${imgdir}/brightness.svg" :image-width "20" :image-height "20")
      (label :class "text vol-text" :text "${br}%"))
    (box
      :class "tray-item control-center-item"
      :vexpand true
      (eventbox
        :onclick "sh -c `../scripts/control-center`"
        :tooltip "open control center"
        (image :class "icon control-center-icon" :path "../${imgdir}/control-center.svg" :image-width "20" :image-height "20")))))

(defwidget workspaces []
  (literal :content workspaces))

(defwidget time []
  (box
    :class "time"
    :halign "start" 
    :spacing 0
    :space-evenly false
    :vexpand true
    (image :class "icon clock-icon" :path "../${imgdir}/clock.svg" :image-width "20" :image-height "20")
    (label :class "text" :text "${hours}ó°‡™${mins}")))

(defwidget date []
  (box
    :class "date"
    :halign "start" 
    :spacing 0
    :space-evenly false
    :vexpand true
    (image :class "icon date-icon" :path "../${imgdir}/calendar.svg" :image-width "20" :image-height "20")
    (label :class "text" :text "${day} ${day-num} ${month}, ${year}")))

(defwidget left []
  (box
    :class "left"
    :spacing 0
    :space-evenly false
    :vexpand true
    (time)
    (date)))

(defwidget nothing []
  (box
    :class "nothing"
    :vexpand true
    (label :class "text" :text "nothing")))

(defwidget bar []
  (centerbox
    :orientation "h"
    :class "bar"
    :vexpand true
    (left)
    (workspaces)
    (tray)))

(defwindow bar
  :stacking "fg"
  :monitor "0"
  :exclusive true
  :namespace "bar"
  :geometry (geometry
              :x "0px"
              :y "0px"
              :width "100%"
              :height "0%"
              :anchor "top center")
  (bar))
