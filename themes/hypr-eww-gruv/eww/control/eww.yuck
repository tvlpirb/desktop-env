(include "./variables.yuck")
(defvar control-anim false)

(defwidget wifi []
  (eventbox
    :onclick "sh -c `../scripts/control-center ; ../scripts/alacritty iwctl`"
    (box
      :class "wifi"
      :orientation "h"
      :space-evenly false
      (image :class "icon wifi-icon" :path wifi-icon :image-width "24" :image-height "24")
      (label :class "text wifi-text" :text wifi-essid))))

(defwidget bluetooth []
  (eventbox
    :onclick "sh -c `../scripts/control-center ; ../scripts/alacritty bluetoothctl`"
    (box
      :class "bluetooth"
      :orientation "h"
      :space-evenly false
      (image :class "icon bt-icon" :path "../${imgdir}/bluetooth.svg" :image-width "24" :image-height "24")
      (label :class "text bt-text" :text "bluetoothctl"))))

(defwidget volume-scale []
  (box
    :class "volume-scale"
    :orientation "h"
    :hexpand true
    (scale
      :flipped false
      :orientation "h"
      :value vol-num
      :draw-value false
      :min 0
      :max 101
      :onchange "pamixer --set-volume {}")))

(defwidget volume-widget []
  (box
    :class "volume"
    :orientation "h"
    :space-evenly false
    (image :class "icon vol-icon" :path vol-icon :image-width "24" :image-height "24")
    (volume-scale)))

(defwidget brightness-scale []
  (box
    :class "brightness-scale"
    :orientation "h"
    :hexpand true
    (scale
      :flipped false
      :orientation "h"
      :value br
      :draw-value false
      :min 0
      :max 101
      :onchange "brillo -S {} ; ${br-change}")))

(defwidget brightness-widget []
  (box
    :class "brightness"
    :orientation "h"
    :space-evenly false
    (image :class "icon br-icon" :path "../${imgdir}/brightness.svg" :image-width "24" :image-height "24")
    (brightness-scale)))

(defwidget cpu-scale []
  (box
    :class "cpu-scale"
    :orientation "v"
    :vexpand true
    (scale
      :flipped true
      :orientation "v"
      :value cpu
      :draw-value false
      :min 0
      :max 101)))

(defwidget cpu-widget []
  (box
    :class "cpu"
    :orientation "v"
    :space-evenly false
    (cpu-scale)
    (image :class "icon cpu-icon" :path "../${imgdir}/cpu.svg" :image-width "24" :image-height "24")))

(defwidget ram-scale []
  (box
    :class "ram-scale"
    :orientation "v"
    :vexpand true
    (scale
      :flipped true
      :orientation "v"
      :value mem
      :draw-value false
      :min 0
      :max 101)))

(defwidget ram-widget []
  (box
    :class "ram"
    :orientation "v"
    :space-evenly false
    (ram-scale)
    (image :class "icon ram-icon" :path "../${imgdir}/ram.svg" :image-width "24" :image-height "24")))

(defwidget battery-scale []
  (box
    :class "battery-scale"
    :orientation "v"
    :vexpand true
    (scale
      :flipped true
      :orientation "v"
      :value bat-num
      :draw-value false
      :min 0
      :max 101)))

(defwidget battery-widget []
  (box
    :class "battery"
    :orientation "v"
    :space-evenly false
    (battery-scale)
    (image :class "icon bat-icon" :path bat-icon :image-width "24" :image-height "24")))

(defwidget info []
  (box
    :class "info"
    :spacing 0
    :space-evenly true
    (cpu-widget)
    (ram-widget)
    (battery-widget)))

(defwidget controls []
  (box
    :class "control-controls"
    :orientation "v"
    (wifi)
    (bluetooth)))

(defwidget top-section []
  (box
    :class "top"
    :orientation "h"
    :space-evenly false
    :spacing 0
    :hexpand false
    (controls)
    (info)))

(defwidget mid-section []
  (box
    :class "mid"
    :orientation "v"
    (volume-widget)
    (brightness-widget)))

(defwidget end-section []
  (box
    :class "end"
    :orientation "h"
    :spacing 0
    :space-evenly true
    :vexpand false
    :hexpand false
    (box
      :orientation "v"
      :class "circle"
      (circular-progress
        :class "circular-progress"
        :value cpu
        :start-at 75
        :thickness 12
        :clockwise true
        (image :class "icon-circle ram-icon-circle" :path "../${imgdir}/cpu.svg" :image-width "50" :image-height "50" :tooltip cpu)))
    (box
      :orientation "v"
      :class "circle"
      (circular-progress
        :class "circular-progress"
        :value mem
        :start-at 75
        :thickness 12
        :clockwise true
        (image :class "icon-circle ram-icon-circle" :path "../${imgdir}/ram.svg" :image-width "50" :image-height "50" :tooltip mem)))
    (box
      :orientation "v"
      :class "circle"
      (circular-progress
        :class "circular-progress"
        :value bat-num
        :start-at 75
        :thickness 12
        :clockwise true
        (image :class "icon-circle bat-icon-circle" :path bat-icon :image-width "50" :image-height "50" :tooltip bat-lvl)))))

(defwidget player []
  (box
    :class "player"
    :style 'background-image: url("${art}")'
    :hexpand true
    (box
      :class "player-overlay"
      :spacing 0
      :space-evenly false
      :vexpand true
      :hexpand true
      (box :class "album" :style 'background-image: url("${album}")' (label :text " "))
      (label :halign "center" :text playing))))

(defwidget player-controls []
  (box
    :class "player-controls"
    :orientation "v"
    :limit-width 25
    (eventbox
      :onclick "playerctl previous"
      (image :class "icon prev-icon" :path "../${imgdir}/previous.svg" :image-width "30" :image-height "30"))
    (eventbox
      :onclick "playerctl play-pause"
      (image :class "icon play-icon" :path "../${imgdir}/play-pause.svg" :image-width "30" :image-height "30"))
    (eventbox
      :onclick "playerctl next"
      (image :class "icon next-icon" :path "../${imgdir}/next.svg" :image-width "30" :image-height "30"))
    (eventbox
      :onclick "playerctl shuffle toggle"
      (image :class "icon shuffle-icon" :path "../${imgdir}/shuffle.svg" :image-width "30" :image-height "30"))))

(defwidget control-center []
  (box
    :class "control-center"
    :orientation "v"
    :space-evenly false
    (top-section)
    (mid-section)))

(defwidget main []
  (box
    :class "main"
    (revealer
      :transition "slidedown"
      :reveal control-anim
      :duration "250ms"
      (control-center))))

(defwindow control-center
  :monitor "0"
  :namespace "control-center"
  :geometry (geometry
              :x "8px"
              :y "8px"
              :width "0px"
              :height "0px"
              :anchor "top right")
  (main))
